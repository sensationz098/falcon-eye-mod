generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEVELOPMENT")
}

model User {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  password String
  role     Role

  created_At DateTime @default(now())
  updated_At DateTime @updatedAt

  Employee Employee?
  work     WorkReport[]
  payroll  Payroll?
  bank     BankAccount?
  leave    LeaveRequest[]

  @@index([id, email])
}

model Employee {
  id                  String    @id @default(cuid())
  employee_id         String
  name                String
  email               String?
  address             String?
  gender              Gender    @default(MALE)
  date_of_birth       DateTime?
  primary_contact     String?
  emergency_contact_1 String?
  emergency_contact_2 String?
  city                String?   @default("New Delhi")
  country             String?   @default("India")
  aadhar_no           String?
  PAN_no              String?

  branch           String       @default("New Delhi")
  designation      String?
  department       String?
  date_of_joining  DateTime?
  employement_type EmployeeType

  created_At DateTime @default(now())
  updated_At DateTime @updatedAt

  userID String @unique
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@index([id, email, userID])
}

model Payroll {
  id               String @id @default(cuid())
  basic_salary     Int
  gross_salary     Int
  net_salary       Int
  HRA              Int?   @default(0)
  medical          Int?   @default(0)
  convenience      Int?   @default(0)
  other_allowences Int?   @default(0)
  deducation       Int?   @default(0)

  created_At DateTime @default(now())
  updated_At DateTime @updatedAt

  userID String @unique
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@index([id, userID])
}

model BankAccount {
  id                  String @id @default(cuid())
  account_holder_name String
  account_no          String
  bank_name           String
  branch              String
  IFSC_code           String

  created_At DateTime @default(now())
  updated_At DateTime @updatedAt

  userID String @unique
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@index([id, userID])
}

model WorkReport {
  id         Int      @id @default(autoincrement())
  updated_At DateTime @default(now())
  work       String

  userID String
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@index([id, userID])
}

model LeaveRequest {
  id Int @id @default(autoincrement())

  emp_name   String
  start_date DateTime
  end_date   DateTime?
  reason     String

  half_day   String
  approval   ApprovalStatus   @default(PENDING)
  leave_type LeaveRequestType
  created_At DateTime         @default(now())

  userID String
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@index([id, userID])
}

model Holiday {
  id           Int      @id @default(autoincrement())
  title        String
  message      String
  holiday_date DateTime
}

enum LeaveRequestType {
  PAID
  SICK
  CASUAL
  MATERNITY
  SHORT
  OTHER
}

enum Role {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
}

enum EmployeeType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  TEMPORARY
  CONTRACT
}

enum ApprovalStatus {
  ACCEPT
  REJECT
  PENDING
  CANCEL
}
